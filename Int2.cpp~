#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <iostream>
#include <stdio.h>
using namespace std;
using namespace cv;

int main(int argc, char** argv)	
//检测圆
	Mat image;
	image = imread(argv[1],1);	
	imshow("源图像",image);
	//平滑图像
	GaussianBlur(image,image,Size(5,5),1.5);
	//储存检测圆的容器
	std::vector<Vec3f> circles;
	//调用Hough变换检测圆
	//参数为：待检测图像，检测结果，检测方法（这个参数唯一）,累加器的分辨率，两个圆间的距离，canny门限的上限（下限自动设为上限的一半），圆心所需要的最小的投票数，最大和最小半径
	HoughCircles(image,circles,CV_HOUGH_GRADIENT,2,50,200,100,25,100);
	std::cout<<"共有圆"<<circles.size()<<"个"<<std::endl;
	//画出圆
	image = imread("D:/picture/images/chariot.jpg",0);
	std::vector<Vec3f>::const_iterator itc = circles.begin();
	while(itc != circles.end())
	{
		circle(image,Point((*itc)[0],(*itc)[1]),(*itc)[2],Scalar(255),2);
		++itc;
	}
	imshow("检测出的圆",image);
	return 0;
}
